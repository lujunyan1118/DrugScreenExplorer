modelFrame <- model.frame(formula, data)
} else {
modelFrame <- model.frame(formula)
}
parm_fit <- dr4pl(formula, data, ...)
newModel <- list(model = modelFrame, formula = formula, parm_fit = parm_fit)
class(newModel) <- "fitIC50"
return(newModel)
}
fitIC50(viab~concentration, data = aa)
fitIC50(viab~concentration, data = aa)
newModel <- fitIC50(viab~concentration, data = aa)
newModel$model
newModel$formula
newModel$parm_fit
newModel$parm_fit$parameters
params <- object$parm_fit$parameters
a <- parms[1]
object <- newModel
params <- object$parm_fit$parameters
a <- parms[1]
d <- parms[4]
x <- parms[2]
params <- object$parm_fit$parameters
a <- params[1]
d <- params[4]
x <- params[2]
b <- params[3]
a
d
object$formula
class(object$formula)
object$formula
object$formula[1]
object$formula[2]
object$formula[3]
as.character(object$formula)
terms(object$formula)
a <- params[1]
d <- params[4]
x <- params[2]
b <- params[3]
predY <- function(x) {
y = d + (a-d)/(1+(x/c)^b)
return(y)
}
predY(0)
predY(1)
predY(10)
a
b
d
params <- object$parm_fit$parameters
a <- min(params[1],params[4])
d <- max(params[4],params[1])
x <- params[2]
b <- params[3]
predY <- function(x) {
y = d + (a-d)/(1+(x/c)^b)
return(y)
}
a
predY(0)
predY(1)
params <- object$parm_fit$parameters
a <- min(params[1],params[4])
d <- max(params[4],params[1])
x <- params[2]
b <- params[3]
predY <- function(x) {
y = d + (a-d)/(1+(x/c)^b)
names(y) <- NULL
return(y)
}
predY
predY(10)
predY(1)
newdata <- c(1,2,3,4,5)
is.vector(newdata)
concName <- as.character(object$formula)[3]
concName
newdata
newdata <- object$model
concName <- as.character(object$formula)[3]
conc <- newdata[,concName]
conc
res <- sapply(conc, predY)
res
plot(res)
plot(res)
plot(bb)
#' Predicted values based on IC50 fit
#'
#' Generic function for ic50 class generated from fitIC50 function.
#' @param object Object of class inheriting from "fitIC50"
#' @param newdata An optional data frame in which to look for variables with which to predict.If omitted, the fitted values are used.
#' @param se.fit Not used, mainly for geom_smooth purpose
#' @param level Not used, mainly for geom_smooth purpose
#' @param interval Not used, mainly for geom_smooth purpose
#' @export
#'
predict.fitIC50 <- function(object, newdata = NULL, se.fit = FALSE, level = 0.95 , interval = c("none", "confidence", "prediction")) {
if (is.null(newdata))
newdata <- object$model else
newdata <- newdata
params <- object$parm_fit$parameters
a <- min(params[1],params[4])
d <- max(params[4],params[1])
x <- params[2]
b <- params[3]
predY <- function(x) {
y = d + (a-d)/(1+(x/c)^b)
names(y) <- NULL
return(y)
}
if (is.vector(newdata)) {
conc <- newdata
} else if (is.data.frame(newdata)) {
if (ncol(newdata) == 1) {
conc <- newdata[,1]
} else {
concName <- as.character(object$formula)[3]
conc <- newdata[,concName]
}
}
res <- sapply(conc, predY)
return(res)
}
source('~/CLLproject_jlu/packages/DrugScreenExplorer/R/processData.R', echo=TRUE)
aa
ggplot(aa, aes(x=concentration, y = viab)) + geom_smooth(method ="IC50")
ggplot(aa, aes(x=concentration, y = viab)) + geom_smooth(method ="fitIC50")
ggplot(aa, aes(x=concentration, y = viab)) + geom_smooth(method ="fitIC50", se=FALSE)
ggplot(aa, aes(x=concentration, y = viab)) + geom_smooth(method ="fitIC50", se=FALSE)
ggplot(aa, aes(x=concentration, y = viab)) + geom_point() + geom_smooth(method ="fitIC50", se=FALSE)
ggplot(aa, aes(x=concentration, y = viab)) + geom_point() + geom_smooth(method ="fitIC50", se=FALSE) + scale_x_log10()
ggplot(aa, aes(x=concentration, y = viab)) + geom_point()
aa
library(tidyverse)
ggplot(aa, aes(x=concentration, y=viab))
quartz()
ggplot(aa, aes(x=concentration, y=viab))
ggplot(aa, aes(x=concentration, y=viab)) + geom_point()
ggplot(aa, aes(x=concentration, y = viab)) + geom_point() + geom_smooth(method ="fitIC50", se=FALSE)
ggplot(aa, aes(x=concentration, y = viab)) + geom_point() + geom_smooth(method ="fitIC50", se=FALSE) + scale_x_log10()
ggplot(aa, aes(x=concentration, y = viab)) + geom_point() + geom_smooth(method ="fitIC50", se=FALSE)
ggplot(aa, aes(x=concentration, y = viab)) + geom_point() + geom_smooth(method ="fitIC50", se=FALSE, method.args = list(logDose=10))
jyluMisc::fitIC50()
jyluMisc::fitIC50()
jyluMisc::fitIC50
runApp('~/CLLproject_jlu/packages/DrugScreenExplorer/shiny')
setwd("~/CLLproject_jlu/packages/DrugScreenExplorer/R")
source('~/CLLproject_jlu/packages/DrugScreenExplorer/R/prepare.R', echo=TRUE)
devtools::load_all()
#' Detect data type, used for shiny app
#' A funtion to detect wether a vector is numeric, binary or catagorical.
#'
#' @param x A vector of input data
#' @export
#' @examples
#' #
detectClass <- function(x) {
#change potential NA records to NA
x[x %in% c("","NA")] <- NA
x <- na.omit(x)
nx <- length(unique(x))
if (nx <= 1) {
return("nd")
} else if (nx == 2) {
return("binary")
} else {
x.num <- as.numeric(as.character(x))
if (all(!is.na(x.num))) {
return("continuous")
} else {
if (nx < length(x)) {
return("categorical")
} else return("nd")
}
}
}
detectClass(c(1,2,3))
detectClass(c(0,1,0,1))
detectClass(c("a","b","c","a"))
devtools::check()
readr::read_delim()
?readr::read_delim()
default_locale
default_locale()
readr::default_locale()
readr::read_delim("../inst/testData/plateAnno/plateAnno.txt")
readr::read_delim("../inst/testData/plateAnno/plateAnno.txt", delim = "\t")
readr::read_delim("../inst/testData/plateAnno/plateAnno.txt", delim = "\t", local = readr::locale(decimal_mark = ","))
library(readr)
deciMark <- ","
?write_delim()
?limma::lmFit
?DESeq2::DESeq
devtools::document()
load("~/CLLproject_jlu/packages/DrugScreenExplorer/data/screenData_normalized.RData")
screenData_normalized$fileName
examplePlate <- filter(screenData_normalized, fileName == "CTGLuminescence_P0024_14PB0550")
library(tidyverse)
load("~/CLLproject_jlu/packages/DrugScreenExplorer/data/screenData_normalized.RData")
examplePlate <- filter(screenData_normalized, fileName == "CTGLuminescence_P0024_14PB0550")
examplePlate
library(tidyverse)
getIniParm <- function(fitIn) {
# estimate initial values based on the values on the plate
dr1 <- median(fitIn[fitIn$numRowID == min(fitIn$numRowID), ]$normVal)
cr2 <- 1 - median(fitIn[fitIn$numRowID == max(fitIn$numRowID), ]$normVal)
dc1 <- median(fitIn[fitIn$numColID == min(fitIn$numColID), ]$normVal)
cc2 <- 1 - median(fitIn[fitIn$numColID == max(fitIn$numColID), ]$normVal)
er1 <- max(fitIn$numRowID) * 0.1
er2 <- max(fitIn$numRowID) + 1 - er1
ec1 <- max(fitIn$numColID) * 0.1
ec2 <- max(fitIn$numColID) + 1 - ec1
sr1 <- 0.5
sr2 <- 0.5
sc1 <- 0.5
sc2 <- 0.5
paraIni <- c(dr1 = dr1, cr2 = cr2, dc1 = dc1,
cc2 = cc2, er1 = er1, er2 = er2,
ec1 = ec1, ec2 = ec2, sr1 = sr1,
sr2 = sr2, sc1 = sc1, sc2 = sc2)
return(paraIni)
}
esFun <- function(data, par) {
#normVal is the normalized viability data. par is a list containing parameters for 2D sigmoid model.
with(data, sum(((normVal - (1 + (par[1] - 1)/(1 + exp((numRowID - par[5])/par[9])) -
par[2] + par[2]/(1 + exp((numRowID - par[6])/par[10]))) *
(1 + (par[3] - 1)/(1 + exp((numColID - par[7])/par[11])) -
par[4] + par[4]/(1 + exp((numColID - par[8])/par[12])))))^2))
}
predictFun <- function(numRowID, numColID, par) {
(1 + (par[1] - 1)/(1 + exp((numRowID - par[5])/par[9])) - par[2] + par[2]/(1 + exp((numRowID - par[6])/par[10]))) *
(1 + (par[3] - 1)/(1 + exp((numColID - par[7])/par[11])) - par[4] + par[4]/(1 + exp((numColID - par[8])/par[12])))
}
fitOneSigmoid <- function(plateData, useNeg, useLowConcentrations, lowConcTab) {
if (!"wellType" %in% colnames(plateData))
stop("No well type information found")
# select 'de facto' negative control wells for surface fitting
if (!useNeg) {
fitIn <- plateData[!plateData$wellType %in% "pos", ]  #do not use positive controls
} else {
if (useLowConcentrations > 0) {
# lowest concentrations are also used for fitting
lowConc <- paste0(lowConcTab$name, "_", lowConcTab$concentration)
lowConcWell <- plateData[paste0(plateData$name, "_", plateData$concentration) %in% lowConc, ]$wellID
} else lowConcWell <- c()
fitIn <- plateData[plateData$wellType %in% "neg" | plateData$wellID %in% lowConcWell, ]
}
paraIni <- getIniParm(fitIn)
edgeFactors <- tryCatch({
sig2D <- optim(par = paraIni, esFun, data = fitIn)
predictFun(plateData$numRowID, plateData$numColID, sig2D$par)
}, error = function(err) {
warning("Edge effect estimate using 2D-sigmoid model failed. Set edgeEffect value to 1")
rep(1, nrow(plateData))
})
plateData$edgeFactor <- edgeFactors
plateData
}
fitOneSigmoid <- function(plateData, useNeg, useLowConcentrations =0, lowConcTab=NULL) {
if (!"wellType" %in% colnames(plateData))
stop("No well type information found")
# select 'de facto' negative control wells for surface fitting
if (!useNeg) {
fitIn <- plateData[!plateData$wellType %in% "pos", ]  #do not use positive controls
} else {
if (useLowConcentrations > 0) {
# lowest concentrations are also used for fitting
lowConc <- paste0(lowConcTab$name, "_", lowConcTab$concentration)
lowConcWell <- plateData[paste0(plateData$name, "_", plateData$concentration) %in% lowConc, ]$wellID
} else lowConcWell <- c()
fitIn <- plateData[plateData$wellType %in% "neg" | plateData$wellID %in% lowConcWell, ]
}
paraIni <- getIniParm(fitIn)
edgeFactors <- tryCatch({
sig2D <- optim(par = paraIni, esFun, data = fitIn)
predictFun(plateData$numRowID, plateData$numColID, sig2D$par)
}, error = function(err) {
warning("Edge effect estimate using 2D-sigmoid model failed. Set edgeEffect value to 1")
rep(1, nrow(plateData))
})
plateData$edgeFactor <- edgeFactors
plateData
}
fittedEdgeEffect <- fitOneSigmoid(plateData = examplePlate, useNeg = TRUE)
examplePlate
library(tidyverse)
getIniParm <- function(fitIn) {
# estimate initial values based on the values on the plate
dr1 <- median(fitIn[fitIn$numRowID == min(fitIn$numRowID), ]$normVal)
cr2 <- 1 - median(fitIn[fitIn$numRowID == max(fitIn$numRowID), ]$normVal)
dc1 <- median(fitIn[fitIn$numColID == min(fitIn$numColID), ]$normVal)
cc2 <- 1 - median(fitIn[fitIn$numColID == max(fitIn$numColID), ]$normVal)
er1 <- max(fitIn$numRowID) * 0.1
er2 <- max(fitIn$numRowID) + 1 - er1
ec1 <- max(fitIn$numColID) * 0.1
ec2 <- max(fitIn$numColID) + 1 - ec1
sr1 <- 0.5
sr2 <- 0.5
sc1 <- 0.5
sc2 <- 0.5
paraIni <- c(dr1 = dr1, cr2 = cr2, dc1 = dc1,
cc2 = cc2, er1 = er1, er2 = er2,
ec1 = ec1, ec2 = ec2, sr1 = sr1,
sr2 = sr2, sc1 = sc1, sc2 = sc2)
return(paraIni)
}
esFun <- function(data, par) {
#normVal is the normalized viability data. par is a list containing parameters for 2D sigmoid model.
with(data, sum(((normVal - (1 + (par[1] - 1)/(1 + exp((numRowID - par[5])/par[9])) -
par[2] + par[2]/(1 + exp((numRowID - par[6])/par[10]))) *
(1 + (par[3] - 1)/(1 + exp((numColID - par[7])/par[11])) -
par[4] + par[4]/(1 + exp((numColID - par[8])/par[12])))))^2))
}
predictFun <- function(numRowID, numColID, par) {
(1 + (par[1] - 1)/(1 + exp((numRowID - par[5])/par[9])) - par[2] + par[2]/(1 + exp((numRowID - par[6])/par[10]))) *
(1 + (par[3] - 1)/(1 + exp((numColID - par[7])/par[11])) - par[4] + par[4]/(1 + exp((numColID - par[8])/par[12])))
}
fitOneSigmoid <- function(plateData, useNeg, useLowConcentrations =0, lowConcTab=NULL) {
if (!"wellType" %in% colnames(plateData))
stop("No well type information found")
# select 'de facto' negative control wells for surface fitting
if (!useNeg) {
fitIn <- plateData[!plateData$wellType %in% "pos", ]  #do not use positive controls
} else {
if (useLowConcentrations > 0) {
# lowest concentrations are also used for fitting
lowConc <- paste0(lowConcTab$name, "_", lowConcTab$concentration)
lowConcWell <- plateData[paste0(plateData$name, "_", plateData$concentration) %in% lowConc, ]$wellID
} else lowConcWell <- c()
fitIn <- plateData[plateData$wellType %in% "neg" | plateData$wellID %in% lowConcWell, ]
}
paraIni <- getIniParm(fitIn)
edgeFactors <- tryCatch({
sig2D <- optim(par = paraIni, esFun, data = fitIn)
predictFun(plateData$numRowID, plateData$numColID, sig2D$par)
}, error = function(err) {
warning("Edge effect estimate using 2D-sigmoid model failed. Set edgeEffect value to 1")
rep(1, nrow(plateData))
})
plateData$edgeFactor <- edgeFactors
plateData
}
#' Fit a 2D surface to capture the incubation/edge effect on each plate
#'
#' This function fits a 2D surface using either loess (local regression) model or a 2D sigmod model
#' based on the measurements on each plate to estimate the shape and strength of per-plate incubation effect.
#' This function is normally called by the correctEdgeEffect() function instead of used as a standalone function.
#'
#' @param screenData the data frame containing screen results generated by \code{readScreen()} function.
#' For this function to work, the \code{normVal} (normalized viability values) generated by \code{readScreen()}
#' function with \code{normalization = TRUE} must be present.
#' @param method a character string specifying the method used for estimating the shape and strength of edge effect.
#' Currently two methods are supported:
#' 'loess', which uses local regression to estimate edge effect;
#' 'sigmoid', a experimental feature, using 2D-sigmoid model to estimate edge effect.
#' @param useNeg a logical value. If TRUE, only negative controls are used to estimate edge effect. Otherwise, all the wells are used for edge effect estimation.
#' @param useLowConcentrations an integer value. In addition to negative controls,
#' sample wells with low concentrations of drugs or other perturbators can be considered as 'de facto' negative controls and included in edge effect estimation.
#' The default value is 0, means no sample wells are used. If the value n >= 1, the n lowest concentrations will be used.
#' @param span a numeric value. The span parameter for loess, which controls the degree of smoothing.
#' @param exclude a list of samples that should be excluded when performing edge effect correction. Both plate file names or sampleIDs can be used as identifiers.
#' @export
#' @import dplyr
#' @return This function will add one column, \code{edgeFactor}, which is the estimated incubation or edge effect, to the input data frame.
#' @examples
#' # load drug screen dataset
#' data('screenData_normalized')
#' screenData_fitted <- fitEdgeEffect(screenData_normalized, method = 'loess', useNeg = TRUE)
fitEdgeEffect <- function(screenData, method = "loess", useNeg = TRUE, useLowConcentrations = 0, span = 1, exclude = c()) {
# a function to calculate position correction factor for each plate
# check if normalized values is present
if (!"normVal" %in% colnames(screenData)) {
error("Normalized values are not present. Please perform plate normalization first.")
}
# remove precalculated edge factor if present
if ("edgeFactor" %in% colnames(screenData))
screenData[["edgeFactor"]] <- NULL
# check if data has been normalized find n lowest concentrations
if (useLowConcentrations > 0) {
# identify the lowest concentrations for each drug
if (!all(c("name", "concentration", "wellType") %in% colnames(screenData))) {
stop("No information of name, concentration and well type found")
} else {
nLowest <- function(x, n) {
sort(unique(x))[seq(1, n)]
}
lowConcTab <- dplyr::filter(screenData, wellType == "sample") %>%
group_by(name) %>%
do(tibble(concentration = nLowest(.$concentration, useLowConcentrations))) %>%
ungroup()
}
}
# change rowID and colID to numeric values for fitting
nRow <- length(unique(screenData$rowID))
row2num <- structure(seq(nRow), names = genRowIDs(nRow))
screenSub <- dplyr::mutate(screenData, numRowID = row2num[rowID], numColID = as.integer(colID)) %>%
dplyr::filter(!fileName %in% exclude)
if (method == "loess") {
screenSub <- group_by(screenSub, fileName) %>%
do(fitOneLoess(., useNeg, useLowConcentrations, lowConcTab, span)) %>%
ungroup() %>%
dplyr::select(fileName, rowID, colID, edgeFactor)
} else if (method == "sigmoid") {
screenSub <- group_by(screenSub, fileName) %>%
do(fitOneSigmoid(., useNeg, useLowConcentrations, lowConcTab)) %>%
ungroup() %>%
dplyr::select(fileName, rowID, colID, edgeFactor)
}
screenData <- left_join(screenData, screenSub, by = c("fileName", "rowID", "colID")) %>%
dplyr::mutate(edgeFactor = ifelse(is.na(edgeFactor), 1, edgeFactor))
return(screenData)
}
load("~/CLLproject_jlu/packages/DrugScreenExplorer/data/screenData_normalized.RData")
screenData_fitted <- fitEdgeEffect(screenData_normalized, method = "sigmoid", useNeg = TRUE)
#' Fit a 2D surface to capture the incubation/edge effect on each plate
#'
#' This function fits a 2D surface using either loess (local regression) model or a 2D sigmod model
#' based on the measurements on each plate to estimate the shape and strength of per-plate incubation effect.
#' This function is normally called by the correctEdgeEffect() function instead of used as a standalone function.
#'
#' @param screenData the data frame containing screen results generated by \code{readScreen()} function.
#' For this function to work, the \code{normVal} (normalized viability values) generated by \code{readScreen()}
#' function with \code{normalization = TRUE} must be present.
#' @param method a character string specifying the method used for estimating the shape and strength of edge effect.
#' Currently two methods are supported:
#' 'loess', which uses local regression to estimate edge effect;
#' 'sigmoid', a experimental feature, using 2D-sigmoid model to estimate edge effect.
#' @param useNeg a logical value. If TRUE, only negative controls are used to estimate edge effect. Otherwise, all the wells are used for edge effect estimation.
#' @param useLowConcentrations an integer value. In addition to negative controls,
#' sample wells with low concentrations of drugs or other perturbators can be considered as 'de facto' negative controls and included in edge effect estimation.
#' The default value is 0, means no sample wells are used. If the value n >= 1, the n lowest concentrations will be used.
#' @param span a numeric value. The span parameter for loess, which controls the degree of smoothing.
#' @param exclude a list of samples that should be excluded when performing edge effect correction. Both plate file names or sampleIDs can be used as identifiers.
#' @export
#' @import dplyr
#' @return This function will add one column, \code{edgeFactor}, which is the estimated incubation or edge effect, to the input data frame.
#' @examples
#' # load drug screen dataset
#' data('screenData_normalized')
#' screenData_fitted <- fitEdgeEffect(screenData_normalized, method = 'loess', useNeg = TRUE)
fitEdgeEffect <- function(screenData, method = "sigmoid", useNeg = TRUE, useLowConcentrations = 0, span = 1, exclude = c()) {
# a function to calculate position correction factor for each plate
## Function to generate an ordered row IDs based on the number of rows
genRowIDs <- function(x) {
if (x > 702)
stop("Rows exceeds maximal supported number (n=702)")
allID <- c(paste0(LETTERS, 0), paste0(rep(LETTERS, each = 26), rep(LETTERS, times = 26)))
return(allID[seq(1, x)])
}
## Function to generate an ordered column IDs based on the number of columns
genColIDs <- function(x) {
formatC(seq(x), width = 2, format = "d", flag = "0")
}
# check if normalized values is present
if (!"normVal" %in% colnames(screenData)) {
error("Normalized values are not present. Please perform plate normalization first.")
}
# remove precalculated edge factor if present
if ("edgeFactor" %in% colnames(screenData))
screenData[["edgeFactor"]] <- NULL
# check if data has been normalized find n lowest concentrations
if (useLowConcentrations > 0) {
# identify the lowest concentrations for each drug
if (!all(c("name", "concentration", "wellType") %in% colnames(screenData))) {
stop("No information of name, concentration and well type found")
} else {
nLowest <- function(x, n) {
sort(unique(x))[seq(1, n)]
}
lowConcTab <- dplyr::filter(screenData, wellType == "sample") %>%
group_by(name) %>%
do(tibble(concentration = nLowest(.$concentration, useLowConcentrations))) %>%
ungroup()
}
}
# change rowID and colID to numeric values for fitting
nRow <- length(unique(screenData$rowID))
row2num <- structure(seq(nRow), names = genRowIDs(nRow))
screenSub <- dplyr::mutate(screenData, numRowID = row2num[rowID], numColID = as.integer(colID)) %>%
dplyr::filter(!fileName %in% exclude)
if (method == "loess") {
screenSub <- group_by(screenSub, fileName) %>%
do(fitOneLoess(., useNeg, useLowConcentrations, lowConcTab, span)) %>%
ungroup() %>%
dplyr::select(fileName, rowID, colID, edgeFactor)
} else if (method == "sigmoid") {
screenSub <- group_by(screenSub, fileName) %>%
do(fitOneSigmoid(., useNeg, useLowConcentrations, lowConcTab)) %>%
ungroup() %>%
dplyr::select(fileName, rowID, colID, edgeFactor)
}
screenData <- left_join(screenData, screenSub, by = c("fileName", "rowID", "colID")) %>%
dplyr::mutate(edgeFactor = ifelse(is.na(edgeFactor), 1, edgeFactor))
return(screenData)
}
load("~/CLLproject_jlu/packages/DrugScreenExplorer/data/screenData_normalized.RData")
screenData_fitted <- fitEdgeEffect(screenData_normalized, method = "sigmoid", useNeg = TRUE)
load("~/CLLproject_jlu/packages/DrugScreenExplorer/data/screenData_normalized.RData")
screenData_fitted <- fitEdgeEffect(screenData_normalized, method = "sigmoid", useNeg = TRUE)
devtools::install_github("lujunyan1118/DrugScreenExplorer_dev")
DrugScreenExplorer::plotPlate(screenData_fitted, plotType = "viability")
pList <- DrugScreenExplorer::plotPlate(screenData_fitted, plotType = "viability")
cowplot::plot_grid(plotlist = pList, ncol=3)
pList <- DrugScreenExplorer::plotPlate(screenData_fitted, plotType = "viability")
cowplot::plot_grid(plotlist = pList, ncol=3)
pList <- DrugScreenExplorer::plotPlate(screenData_fitted, plotType = "edgeEffect")
cowplot::plot_grid(plotlist = pList, ncol=3)
